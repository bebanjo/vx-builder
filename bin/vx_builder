#!/bin/bash

set -e

# TODO: remove after image updated
default_bundle="/opt/vexor/packages/ruby-1.9.3-p547/bin/bundle"

ruby_version () {
  local ver
  local st
  ver="$($default_bundle platform --ruby)"
  st=$?

  if [[ $ver =~ ^ruby\ [0-9] ]] ; then
    echo $ver | sed -e 's/ruby //'
  else
    echo '2.0.0'
  fi

  return $st
}

ruby_install () {
  local re
  local ver

  if [[ "x$1" == "x" ]] ;
  then
    ver=$(ruby_version)
  else
    ver=$1
  fi

  echo "$ sudo env PATH=\$PATH vxvm install ruby $ver"
  re=$(sudo env PATH=$PATH vxvm install ruby $ver)
  echo $re > .ruby-activate
  source $re
}

ruby_gen_database_spec_for_mongoid () {
  bundle show mongoid > /dev/null && (
    echo 'create config/mongoid.yml'
    cat > config/mongoid.yml <<EOL
test:
  sessions:
    default:
      database: mongoid
      hosts:
        - localhost:27017
EOL
    ln -s $(pwd)/config/mongoid.yml $(pwd)/mongoid.yml
    echo "$ sudo service mongodb start"
    sudo service mongodb start
  )
}

ruby_rails_gen_database_spec_for_pg () {
  bundle show pg > /dev/null && (
    echo 'create config/database.yml for postgresql'
    cat > config/database.yml <<EOL
test:
  adapter: postgresql
  encoding: unicode
  database: rails_test
  username: postgres
  host: localhost
EOL
  )
}

ruby_rails_gen_database_spec_for_mysql () {
  bundle show mysql2 > /dev/null && (
    echo 'create config/database.yml for mysql'
    cat > config/database.yml <<EOL
test:
   adapter: mysql2
   encoding: utf8
   database: rails_test
   username: root
   host: localhost
EOL
  )
}

ruby_rails_gen_database_spec_for_sqlite () {
  bundle show sqlite3 > /dev/null && (
    echo 'create config/database.yml for sqlite3'
    cat > config/database.yml <<EOL
test:
  adapter: sqlite3
  database: db/test.sqlite3
EOL
  )
}

ruby_rails_gen_secrets () {
  echo 'create config/secrets.yml'
  cat > config/secrets.yml <<EOL
test:
  secret_key_base: "secret"
EOL
  true
}

ruby_rails_db_create () {
  echo $ bundle exec rake db:create
  bundle exec rake db:create

  test -f db/schema.rb && (
    echo $ bundle exec rake db:schema:load
    bundle exec rake db:schema:load
  )

  test -d db/migrate && (
    echo $ bundle exec rake db:migrate
    bundle exec rake db:migrate
  )

  true
}

ruby_rails_setup () {
  local re
  re=$(bundle show rails > /dev/null && echo "Yes" || echo "No")
  if [[ "x$re" == 'xYes' ]] ; then
    (
      ruby_rails_gen_database_spec_for_pg ||
      ruby_rails_gen_database_spec_for_mysql ||
      ruby_rails_gen_database_spec_for_sqlite
    ) &&
    ruby_rails_gen_secrets &&
    ruby_rails_db_create
  fi
}

case "$1" in
  "ruby:install")
    ruby_install $2
    ;;
  "ruby:rails:install")
    ruby_gen_database_spec_for_mongoid || true
    ruby_rails_setup
    ;;
  *)
    echo "Unknown command $@"
    exit 1
    ;;
esac

